package ru.paskal.laba1.client;

import com.fasterxml.jackson.databind.node.JsonNodeType;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.Session;
import org.springframework.stereotype.Component;
import ru.paskal.laba1.utils.JsonPair;
import ru.paskal.laba1.utils.Utils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

@Component
@Slf4j
public class Dao {

    @PersistenceContext
    private EntityManager entityManager;

    private Session getSession() {
        return entityManager.unwrap(Session.class);
    }

    @Transactional
    public void save(String tableName, JsonPair serializedJsonList) {
        if (tableExists(tableName)) {
            log.info("Table {} already exists, skipping...", tableName);
            return;
        }
        var rawTableHead = serializedJsonList.getLeft();
        var tableHead = Utils.mapTypesToSql(rawTableHead);
        var tableBody = serializedJsonList.getRight();
        var tableHeadStr = tableHead
                .entrySet()
                .stream()
                .map(entry -> Utils.escapeWithDoubleQuotes(entry.getKey()) + " " + entry.getValue())
                .collect(Collectors.joining(", "));
        var idStr = "id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, ";
        String makeTableRequest = "CREATE TABLE IF NOT EXISTS " + tableName + " (" + idStr + tableHeadStr + ");";
        log.info("Create table by command: {}", Utils.getShortStr(makeTableRequest));
        getSession().createNativeQuery(makeTableRequest).executeUpdate();
        log.info("Table {} created successfully.", tableName);


        String columns = tableHead.keySet().stream().map(Utils::escapeWithDoubleQuotes).collect(Collectors.joining(", "));
        List<String> values = new ArrayList<>();

        for (Map<String, Object> line : tableBody) {
            StringBuilder objStr = new StringBuilder();
            for (String key : tableHead.keySet()) {
                var sqlType = tableHead.get(key);
                var rawType = rawTableHead.get(key);
                var value = line.get(key);
                if (Objects.isNull(value)) {
                    objStr.append("NULL, ");
                } else if (rawType == JsonNodeType.OBJECT) {
                    String escapedValue = Utils.escapeJsonString((String) value);
                    objStr.append(Utils.escapeWithQuotes(escapedValue)).append(", ");
                } else if (value.toString().isEmpty()) {
                    objStr.append("NULL, ");
                } else {
                    objStr.append(Utils.wrapInSqlType(value, sqlType)).append(", ");
                }

            }
            values.add(String.format("(%s)", objStr.substring(0, objStr.length() - 2)));
        }
        var joinedValues = String.join(", ", values);
        String insertRequest = String.format("INSERT INTO %s (%s) VALUES %s;", tableName, columns, joinedValues);
        log.info("Inserting data by command: {}", Utils.getShortStr(insertRequest));
        getSession().createNativeQuery(insertRequest).executeUpdate();
        log.info("Data inserted successfully into table {}.", tableName);
        System.out.println("Enter URL (or type 'exit' to quit): ");
//        String values = tableBody
//                .stream()
//                .map(elem -> {
//                    var valuesStr = tableHead.keySet()
//                            .stream()
//                            .map(key -> {
//                                var sqlType = tableHead.get(key);
//                                var value = elem.get(key);
//                                if (Objects.isNull(value)) {
//                                    return "NULL";
//                                } else {
//                                    var wrappedValue = Utils.wrapInSqlType(value, sqlType);
//                                    if (wrappedValue instanceof String) {
//                                        if (rawTableHead.get(key) == JsonNodeType.OBJECT) {
//                                            String escapedValue = Utils.escapeJsonString((String) wrappedValue);
//                                            return escapedValue.isEmpty() ? "NULL" : "'" + escapedValue + "'";
//                                        } else {
//                                            return "'" + wrappedValue + "'";
//                                        }
//                                    } else if (wrappedValue instanceof Boolean) {
//                                        return (Boolean) wrappedValue ? "TRUE" : "FALSE";
//                                    } else {
//                                        return wrappedValue.toString().isEmpty() ? "NULL" : wrappedValue.toString();
//                                    }
//                                }
//                            })
//                            .collect(Collectors.joining(", "));
//                    return "(" + valuesStr + ")";
//                }).collect(Collectors.joining(", "));
//        String insertRequest = String.format("INSERT INTO %s (%s) VALUES %s;", tableName, columns, values);
//        log.info("Insert request: {}", insertRequest);
//        getSession().createNativeQuery(insertRequest).executeUpdate();
    }


    @Transactional
    public boolean tableExists(String tableName) {
        String checkTableSQL = "SELECT COUNT(*) " +
                "FROM INFORMATION_SCHEMA.TABLES " +
                "WHERE TABLE_NAME = :tableName";
        var query = getSession().createNativeQuery(checkTableSQL, Integer.class)
                .setParameter("tableName", tableName);
        Integer count = query.getSingleResult();
        return count.intValue() > 0;
    }
}
